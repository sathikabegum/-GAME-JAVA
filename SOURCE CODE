import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.geom.RoundRectangle2D;
import java.io.File;
import java.io.IOException;

class RoundedButton extends JButton {
    private Shape shape;
    private static final Color VERY_LIGHT_PINK = new Color(255, 230, 230); // Very light pink color

    public RoundedButton(String label) {
        super(label);
        setOpaque(false);
        setBackground(VERY_LIGHT_PINK);
        setForeground(Color.BLACK);
    }

    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setColor(getBackground());
        g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
        super.paintComponent(g);
    }

    @Override
    protected void paintBorder(Graphics g) {
        g.setColor(getForeground());
        g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
    }

    @Override
    public boolean contains(int x, int y) {
        if (shape == null || !shape.getBounds().equals(getBounds())) {
            shape = new RoundRectangle2D.Float(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
        }
        return shape.contains(x, y);
    }
}

public class TicTacToeGUIIII extends JFrame {
    private JPanel boardPanel;
    private RoundedButton[][] buttons;
    private char[][] board;
    private char currentPlayer;
    private boolean gameOver;

    public TicTacToeGUIIII() {
        super("Tic Tac Toe");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 400);
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(255, 204, 203)); // Mild red background

        board = new char[3][3];
        buttons = new RoundedButton[3][3];
        currentPlayer = 'X';
        gameOver = false;

        boardPanel = new JPanel();
        boardPanel.setLayout(new GridLayout(3, 3, 10, 10)); // Grid with gaps
        boardPanel.setBackground(new Color(255, 204, 203)); // Mild red background
        initializeButtons();

        add(boardPanel, BorderLayout.CENTER);
    }

    private void initializeButtons() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new RoundedButton("");
                buttons[i][j].setFont(new Font("Arial", Font.BOLD, 50));
                buttons[i][j].addActionListener(e -> buttonClicked(e));
                boardPanel.add(buttons[i][j]);
                board[i][j] = ' ';
            }
        }
    }

    private void buttonClicked(ActionEvent e) {
        if (gameOver) {
            return;
        }

        RoundedButton clickedButton = (RoundedButton) e.getSource();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j] == clickedButton && board[i][j] == ' ') {
                    setIcon(i, j, clickedButton);
                    board[i][j] = currentPlayer;
                    checkGameStatus();
                    togglePlayer();
                    return;
                }
            }
        }
    }

    private void setIcon(int i, int j, JButton button) {
        String imagePathX = "C:\\Users\\sathi\\OneDrive\\Desktop\\king1.png"; // Replace with your X image path
        String imagePathO = "C:\\Users\\sathi\\Downloads\\queen.png"; // Replace with your O image path

        try {
            ImageIcon iconX = new ImageIcon(ImageIO.read(new File(imagePathX)));
            ImageIcon iconO = new ImageIcon(ImageIO.read(new File(imagePathO)));
            button.setIcon(currentPlayer == 'X' ? iconX : iconO);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void checkGameStatus() {
        if (haveWon()) {
            JOptionPane.showMessageDialog(this, "Player " + currentPlayer + " wins!");
            gameOver = true;
        } else if (isBoardFull()) {
            JOptionPane.showMessageDialog(this, "The game is a draw!");
            gameOver = true;
        }
    }

    private void togglePlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    private boolean haveWon() {
        // Check rows and columns
        for (int i = 0; i < 3; i++) {
            if (checkLine(board[i][0], board[i][1], board[i][2]) ||
                    checkLine(board[0][i], board[1][i], board[2][i])) {
                return true;
            }
        }

        // Check diagonals
        return checkLine(board[0][0], board[1][1], board[2][2]) ||
                checkLine(board[0][2], board[1][1], board[2][0]);
    }

    private boolean checkLine(char a, char b, char c) {
        return (a != ' ' && a == b && b == c);
    }

    private boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TicTacToeGUIIII().setVisible(true));
    }
}
